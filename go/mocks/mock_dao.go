// Code generated by MockGen. DO NOT EDIT.
// Source: dao/dao.go
//
// Generated by this command:
//
//	mockgen -source=dao/dao.go -destination=mocks/mock_dao.go
//

// Package mock_dao is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dao "github.com/sashankg/hold/dao"
	gomock "go.uber.org/mock/gomock"
)

// MockDao is a mock of Dao interface.
type MockDao struct {
	ctrl     *gomock.Controller
	recorder *MockDaoMockRecorder
}

// MockDaoMockRecorder is the mock recorder for MockDao.
type MockDaoMockRecorder struct {
	mock *MockDao
}

// NewMockDao creates a new mock instance.
func NewMockDao(ctrl *gomock.Controller) *MockDao {
	mock := &MockDao{ctrl: ctrl}
	mock.recorder = &MockDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDao) EXPECT() *MockDaoMockRecorder {
	return m.recorder
}

// AddCollection mocks base method.
func (m *MockDao) AddCollection(ctx context.Context, collection *dao.Collection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCollection", ctx, collection)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCollection indicates an expected call of AddCollection.
func (mr *MockDaoMockRecorder) AddCollection(ctx, collection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCollection", reflect.TypeOf((*MockDao)(nil).AddCollection), ctx, collection)
}

// FindCollectionById mocks base method.
func (m *MockDao) FindCollectionById(ctx context.Context, id int) (*dao.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCollectionById", ctx, id)
	ret0, _ := ret[0].(*dao.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCollectionById indicates an expected call of FindCollectionById.
func (mr *MockDaoMockRecorder) FindCollectionById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCollectionById", reflect.TypeOf((*MockDao)(nil).FindCollectionById), ctx, id)
}

// FindCollectionBySpec mocks base method.
func (m *MockDao) FindCollectionBySpec(ctx context.Context, spec dao.CollectionSpec) (*dao.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCollectionBySpec", ctx, spec)
	ret0, _ := ret[0].(*dao.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCollectionBySpec indicates an expected call of FindCollectionBySpec.
func (mr *MockDaoMockRecorder) FindCollectionBySpec(ctx, spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCollectionBySpec", reflect.TypeOf((*MockDao)(nil).FindCollectionBySpec), ctx, spec)
}

// GetRecord mocks base method.
func (m *MockDao) GetRecord(ctx context.Context, id int, selection []dao.Selection, collectionId int, collectionMap map[int]*dao.Collection) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecord", ctx, id, selection, collectionId, collectionMap)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecord indicates an expected call of GetRecord.
func (mr *MockDaoMockRecorder) GetRecord(ctx, id, selection, collectionId, collectionMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecord", reflect.TypeOf((*MockDao)(nil).GetRecord), ctx, id, selection, collectionId, collectionMap)
}
